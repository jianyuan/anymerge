{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"anymerge","text":"<p>Anymerge is a library for merging dataclasses, TypedDicts, and Pydantic models seamlessly with custom reducers.</p>"},{"location":"#examples","title":"Examples","text":"<pre><code>import operator\nfrom typing import Annotated\n\nfrom anymerge import Reducer, merge\nfrom pydantic import BaseModel\n\nclass State(BaseModel):\n    replace: str # (1)!\n    total: Annotated[int, Reducer(operator.add)] # (2)!\n\n\noriginal_state = State(\n    replace=\"original\",\n    total=0,\n)\nnew_state = State(\n    replace=\"replace\",\n    total=1,\n)\n\nfinal = merge(original, new_state)\nprint(final)\n#&gt; State(replace='replace', total=1)\n</code></pre> <ol> <li>By default, the field value is replaced with the value from the new state.</li> <li>By annotating the field with a <code>Reducer</code>, you can specify a custom reducer function for the field. In this example, the <code>total</code> field uses the <code>operator.add</code> function as its reducer. This means that when merging, the values of the <code>total</code> field from both states will be added together instead of the default behavior of replacing the value.</li> </ol>"},{"location":"#installation","title":"Installation","text":"<pre><code>$ pip install anymerge\n</code></pre>"},{"location":"#license","title":"License","text":"<p><code>anymerge</code> is distributed under the terms of the MIT\u00a0\u29c9 license.</p>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li>anymerge<ul> <li>adapters<ul> <li>base_adapter</li> <li>dataclass_adapter</li> <li>dict_adapter</li> <li>pydantic_adapter</li> <li>typeddict_adapter</li> </ul> </li> <li>exceptions</li> <li>models</li> <li>reducers</li> <li>types</li> </ul> </li> </ul>"},{"location":"reference/anymerge/","title":"anymerge","text":""},{"location":"reference/anymerge/#anymerge","title":"anymerge","text":""},{"location":"reference/anymerge/#anymerge.Reducer","title":"Reducer","text":"<pre><code>Reducer(reducer: ReducerCallable) -&gt; ReducerInfo\n</code></pre><pre><code>Reducer(*, deep: Literal[True]) -&gt; ReducerInfo\n</code></pre><pre><code>Reducer(reducer: EllipsisType) -&gt; ReducerInfo\n</code></pre> <pre><code>Reducer(\n    reducer: ReducerCallable | EllipsisType | None = None,\n    *,\n    deep: bool | None = None,\n) -&gt; ReducerInfo\n</code></pre> <p>Create a <code>ReducerInfo</code> object with the given <code>reducer</code> callable or <code>deep</code> set to True.</p> PARAMETER DESCRIPTION <code>reducer</code> <p>The reducer callable to apply to the field. If set to <code>...</code>, the reducer will be applied deeply.</p> <p> TYPE: <code>ReducerCallable | EllipsisType | None</code> DEFAULT: <code>None</code> </p> <code>deep</code> <p>Whether to apply the reducer deeply.</p> <p> TYPE: <code>bool | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>ReducerInfo</code> <p>A <code>ReducerInfo</code> object with the given <code>reducer</code> callable or <code>deep</code> set to True.</p> <p>Examples:</p> <p>Define a reducer callable:</p> <pre><code>&gt;&gt;&gt; Reducer(operator.add)\n</code></pre> <p>To apply a reducer deeply, either use <code>...</code> as the <code>reducer</code> argument or set <code>deep</code> to <code>True</code>:</p> <pre><code>&gt;&gt;&gt; Reducer(...)\n&gt;&gt;&gt; Reducer(deep=True)\n</code></pre> Source code in <code>src/anymerge/_api.py</code> <pre><code>def Reducer(  # noqa: N802\n    reducer: ReducerCallable | types.EllipsisType | None = None,\n    *,\n    deep: bool | None = None,\n) -&gt; models.ReducerInfo:\n    \"\"\"Create a [`ReducerInfo`][anymerge.models.ReducerInfo] object with the given `reducer` callable or `deep` set to True.\n\n    Args:\n        reducer: The reducer callable to apply to the field. If set to `...`, the reducer will be applied deeply.\n        deep: Whether to apply the reducer deeply.\n\n    Returns:\n        A [`ReducerInfo`][anymerge.models.ReducerInfo] object with the given `reducer` callable or `deep` set to True.\n\n    Examples:\n        Define a reducer callable:\n\n            &gt;&gt;&gt; Reducer(operator.add)\n\n        To apply a reducer deeply, either use `...` as the `reducer` argument or set `deep` to `True`:\n\n            &gt;&gt;&gt; Reducer(...)\n            &gt;&gt;&gt; Reducer(deep=True)\n    \"\"\"\n    if reducer is ...:\n        if deep is False:\n            msg = \"deep cannot be False when reducer is ...\"\n            raise AnyMergeValueError(msg)\n        return models.ReducerInfo(None, deep=True)\n\n    if reducer is None:\n        if deep is False:\n            msg = \"deep cannot be False when reducer is None\"\n            raise AnyMergeValueError(msg)\n        return models.ReducerInfo(None, deep=True)\n\n    if deep is True:\n        msg = \"deep cannot be True when reducer is provided\"\n        raise AnyMergeValueError(msg)\n\n    return models.ReducerInfo(reducer=reducer, deep=False)\n</code></pre>"},{"location":"reference/anymerge/#anymerge.merge","title":"merge","text":"<pre><code>merge(\n    a: T,\n    b: Any,\n    *,\n    default_reducer: ReducerInfo = DEFAULT_REDUCER,\n) -&gt; T\n</code></pre> <p>Merge two instances of data models.</p> PARAMETER DESCRIPTION <code>a</code> <p>The first instance to merge. This should contain all the annotations with the reducer information.</p> <p> TYPE: <code>T</code> </p> <code>b</code> <p>The second instance to merge.</p> <p> TYPE: <code>Any</code> </p> <code>default_reducer</code> <p>The default reducer to apply to fields.</p> <p> TYPE: <code>ReducerInfo</code> DEFAULT: <code>DEFAULT_REDUCER</code> </p> RETURNS DESCRIPTION <code>T</code> <p>The merged instance.</p> Source code in <code>src/anymerge/_merger.py</code> <pre><code>def merge(\n    a: T,\n    b: typing.Any,\n    *,\n    default_reducer: ReducerInfo = DEFAULT_REDUCER,\n) -&gt; T:\n    \"\"\"\n    Merge two instances of data models.\n\n    Args:\n        a: The first instance to merge. This should contain all the annotations with the reducer information.\n        b: The second instance to merge.\n        default_reducer: The default reducer to apply to fields.\n\n    Returns:\n        The merged instance.\n    \"\"\"\n    adapted_a = maybe_adapt_value(a)\n    adapted_b = maybe_adapt_value(b)\n    fields = adapted_a.adapter.get_fields()\n    a_values = adapted_a.get_values()\n    b_values = adapted_b.get_values()\n    changes = {\n        key: apply_reducers(\n            a_values[key],\n            value,\n            field_info=fields[key],\n            default_reducer=default_reducer,\n        )\n        for key, value in b_values.items()\n        if key in fields\n    }\n\n    return adapted_a.copy(changes=changes)\n</code></pre>"},{"location":"reference/anymerge/#anymerge.reduce","title":"reduce","text":"<pre><code>reduce(\n    initial: T,\n    iterable: Iterable[Any],\n    *,\n    default_reducer: ReducerInfo = DEFAULT_REDUCER,\n) -&gt; T\n</code></pre> <p>Reduce an iterable of instances of data models.</p> PARAMETER DESCRIPTION <code>initial</code> <p>The initial instance to reduce. This should contain all the annotations with the reducer information.</p> <p> TYPE: <code>T</code> </p> <code>iterable</code> <p>The iterable of instances to reduce.</p> <p> TYPE: <code>Iterable[Any]</code> </p> RETURNS DESCRIPTION <code>T</code> <p>The reduced instance.</p> Source code in <code>src/anymerge/_reducer.py</code> <pre><code>def reduce(\n    initial: T,\n    iterable: typing.Iterable[typing.Any],\n    *,\n    default_reducer: ReducerInfo = DEFAULT_REDUCER,\n) -&gt; T:\n    \"\"\"Reduce an iterable of instances of data models.\n\n    Args:\n        initial: The initial instance to reduce. This should contain all the annotations with the reducer information.\n        iterable: The iterable of instances to reduce.\n\n    Returns:\n        The reduced instance.\n    \"\"\"\n    value = initial\n    for item in iterable:\n        value = merge(value, item, default_reducer=default_reducer)\n    return value\n</code></pre>"},{"location":"reference/anymerge/exceptions/","title":"exceptions","text":""},{"location":"reference/anymerge/exceptions/#anymerge.exceptions","title":"anymerge.exceptions","text":""},{"location":"reference/anymerge/exceptions/#anymerge.exceptions.AnyMergeError","title":"AnyMergeError","text":"<p>               Bases: <code>Exception</code></p> <p>Base class for all AnyMerge exceptions.</p>"},{"location":"reference/anymerge/exceptions/#anymerge.exceptions.AnyMergeTypeError","title":"AnyMergeTypeError","text":"<p>               Bases: <code>TypeError</code>, <code>AnyMergeError</code></p> <p>Raised when an invalid type is encountered.</p>"},{"location":"reference/anymerge/exceptions/#anymerge.exceptions.AnyMergeValueError","title":"AnyMergeValueError","text":"<p>               Bases: <code>ValueError</code>, <code>AnyMergeError</code></p> <p>Raised when an invalid value is encountered.</p>"},{"location":"reference/anymerge/models/","title":"models","text":""},{"location":"reference/anymerge/models/#anymerge.models","title":"anymerge.models","text":""},{"location":"reference/anymerge/models/#anymerge.models.ReducerInfo","title":"ReducerInfo  <code>dataclass</code>","text":"<pre><code>ReducerInfo(\n    reducer: ReducerCallable | None = None,\n    *,\n    deep: bool = False,\n)\n</code></pre> <p>Information about a reducer to apply to a field.</p>"},{"location":"reference/anymerge/models/#anymerge.models.ReducerInfo.reducer","title":"reducer  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>reducer: ReducerCallable | None = None\n</code></pre> <p>The reducer callable to apply to the field.</p>"},{"location":"reference/anymerge/models/#anymerge.models.ReducerInfo.deep","title":"deep  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>deep: bool = field(default=False, kw_only=True)\n</code></pre> <p>Whether to apply the reducer deeply.</p>"},{"location":"reference/anymerge/models/#anymerge.models.FieldInfo","title":"FieldInfo  <code>dataclass</code>","text":"<pre><code>FieldInfo(\n    *,\n    name: str,\n    base_type: type[Any] | list[type[Any]],\n    reducers: list[ReducerInfo] | None,\n)\n</code></pre> <p>Information about a field in a data model.</p>"},{"location":"reference/anymerge/models/#anymerge.models.FieldInfo.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre> <p>The name of the field.</p>"},{"location":"reference/anymerge/models/#anymerge.models.FieldInfo.base_type","title":"base_type  <code>instance-attribute</code>","text":"<pre><code>base_type: type[Any] | list[type[Any]]\n</code></pre> <p>The base type of the field with annotations removed.</p>"},{"location":"reference/anymerge/models/#anymerge.models.FieldInfo.reducers","title":"reducers  <code>instance-attribute</code>","text":"<pre><code>reducers: list[ReducerInfo] | None\n</code></pre> <p>A list of information about reducers to apply to the field.</p>"},{"location":"reference/anymerge/reducers/","title":"reducers","text":""},{"location":"reference/anymerge/reducers/#anymerge.reducers","title":"anymerge.reducers","text":""},{"location":"reference/anymerge/reducers/#anymerge.reducers.replace","title":"replace","text":"<pre><code>replace(_a: Any, b: T) -&gt; T\n</code></pre> <p>Return the second argument.</p> Source code in <code>src/anymerge/reducers.py</code> <pre><code>def replace(_a: typing.Any, b: T, /) -&gt; T:\n    \"\"\"Return the second argument.\"\"\"\n    return b\n</code></pre>"},{"location":"reference/anymerge/types/","title":"types","text":""},{"location":"reference/anymerge/types/#anymerge.types","title":"anymerge.types","text":""},{"location":"reference/anymerge/types/#anymerge.types.ReducerCallable","title":"ReducerCallable  <code>module-attribute</code>","text":"<pre><code>ReducerCallable: TypeAlias = Callable[[Any, Any], Any]\n</code></pre> <p>A reducer that takes two arguments and returns a single value.</p>"},{"location":"reference/anymerge/adapters/","title":"adapters","text":""},{"location":"reference/anymerge/adapters/#anymerge.adapters","title":"anymerge.adapters","text":""},{"location":"reference/anymerge/adapters/#anymerge.adapters.BaseAdapter","title":"BaseAdapter","text":"<pre><code>BaseAdapter(model: type[T])\n</code></pre> <p>               Bases: <code>ABC</code>, <code>Generic[T]</code></p> Source code in <code>src/anymerge/adapters/base_adapter.py</code> <pre><code>def __init__(self, model: type[T]) -&gt; None:\n    self.model = model\n</code></pre>"},{"location":"reference/anymerge/adapters/#anymerge.adapters.BaseAdapter.model","title":"model  <code>instance-attribute</code>","text":"<pre><code>model: type[T] = model\n</code></pre> <p>The model type of the adapter.</p>"},{"location":"reference/anymerge/adapters/#anymerge.adapters.BaseAdapter.is_supported_type","title":"is_supported_type  <code>abstractmethod</code> <code>classmethod</code>","text":"<pre><code>is_supported_type(value: Any) -&gt; TypeGuard[type[T]]\n</code></pre> <p>Check if the value is supported by the adapter.</p> PARAMETER DESCRIPTION <code>value</code> <p>The value to check.</p> <p> TYPE: <code>Any</code> </p> RETURNS DESCRIPTION <code>TypeGuard[type[T]]</code> <p>Whether the value is supported by the adapter.</p> Source code in <code>src/anymerge/adapters/base_adapter.py</code> <pre><code>@classmethod\n@abc.abstractmethod\ndef is_supported_type(cls, value: typing.Any) -&gt; typing.TypeGuard[type[T]]:\n    \"\"\"Check if the value is supported by the adapter.\n\n    Args:\n        value: The value to check.\n\n    Returns:\n        Whether the value is supported by the adapter.\n    \"\"\"\n</code></pre>"},{"location":"reference/anymerge/adapters/#anymerge.adapters.BaseAdapter.get_fields","title":"get_fields  <code>abstractmethod</code>","text":"<pre><code>get_fields() -&gt; dict[Any, FieldInfo]\n</code></pre> <p>Get the fields of the model.</p> RETURNS DESCRIPTION <code>dict[Any, FieldInfo]</code> <p>The fields of the model.</p> Source code in <code>src/anymerge/adapters/base_adapter.py</code> <pre><code>@abc.abstractmethod\ndef get_fields(self) -&gt; dict[typing.Any, FieldInfo]:\n    \"\"\"Get the fields of the model.\n\n    Returns:\n        The fields of the model.\n    \"\"\"\n</code></pre>"},{"location":"reference/anymerge/adapters/#anymerge.adapters.BaseAdapter.get_values","title":"get_values  <code>abstractmethod</code>","text":"<pre><code>get_values(value: T) -&gt; dict[Any, Any]\n</code></pre> <p>Get the values of the instance.</p> PARAMETER DESCRIPTION <code>value</code> <p>The instance to get the values from.</p> <p> TYPE: <code>T</code> </p> RETURNS DESCRIPTION <code>dict[Any, Any]</code> <p>The values of the instance.</p> Source code in <code>src/anymerge/adapters/base_adapter.py</code> <pre><code>@abc.abstractmethod\ndef get_values(self, value: T) -&gt; dict[typing.Any, typing.Any]:\n    \"\"\"Get the values of the instance.\n\n    Args:\n        value: The instance to get the values from.\n\n    Returns:\n        The values of the instance.\n    \"\"\"\n</code></pre>"},{"location":"reference/anymerge/adapters/#anymerge.adapters.BaseAdapter.copy","title":"copy  <code>abstractmethod</code>","text":"<pre><code>copy(value: T, *, changes: dict[Any, Any]) -&gt; T\n</code></pre> <p>Copy the instance with the changes applied.</p> PARAMETER DESCRIPTION <code>value</code> <p>The instance to copy.</p> <p> TYPE: <code>T</code> </p> <code>changes</code> <p>The changes to apply to the instance.</p> <p> TYPE: <code>dict[Any, Any]</code> </p> RETURNS DESCRIPTION <code>T</code> <p>The copied instance.</p> Source code in <code>src/anymerge/adapters/base_adapter.py</code> <pre><code>@abc.abstractmethod\ndef copy(self, value: T, *, changes: dict[typing.Any, typing.Any]) -&gt; T:\n    \"\"\"Copy the instance with the changes applied.\n\n    Args:\n        value: The instance to copy.\n        changes: The changes to apply to the instance.\n\n    Returns:\n        The copied instance.\n    \"\"\"\n</code></pre>"},{"location":"reference/anymerge/adapters/#anymerge.adapters.BaseAdapter.wrap","title":"wrap","text":"<pre><code>wrap(value: T) -&gt; WrappedValue[T]\n</code></pre> <p>Wrap the value with the adapter.</p> PARAMETER DESCRIPTION <code>value</code> <p>The value to wrap.</p> <p> TYPE: <code>T</code> </p> RETURNS DESCRIPTION <code>WrappedValue[T]</code> <p>The wrapped value.</p> Source code in <code>src/anymerge/adapters/base_adapter.py</code> <pre><code>def wrap(self, value: T) -&gt; WrappedValue[T]:\n    \"\"\"Wrap the value with the adapter.\n\n    Args:\n        value: The value to wrap.\n\n    Returns:\n        The wrapped value.\n    \"\"\"\n    return WrappedValue(value, adapter=self)\n</code></pre>"},{"location":"reference/anymerge/adapters/base_adapter/","title":"base_adapter","text":""},{"location":"reference/anymerge/adapters/base_adapter/#anymerge.adapters.base_adapter","title":"anymerge.adapters.base_adapter","text":""},{"location":"reference/anymerge/adapters/base_adapter/#anymerge.adapters.base_adapter.BaseAdapter","title":"BaseAdapter","text":"<pre><code>BaseAdapter(model: type[T])\n</code></pre> <p>               Bases: <code>ABC</code>, <code>Generic[T]</code></p> Source code in <code>src/anymerge/adapters/base_adapter.py</code> <pre><code>def __init__(self, model: type[T]) -&gt; None:\n    self.model = model\n</code></pre>"},{"location":"reference/anymerge/adapters/base_adapter/#anymerge.adapters.base_adapter.BaseAdapter.model","title":"model  <code>instance-attribute</code>","text":"<pre><code>model: type[T] = model\n</code></pre> <p>The model type of the adapter.</p>"},{"location":"reference/anymerge/adapters/base_adapter/#anymerge.adapters.base_adapter.BaseAdapter.is_supported_type","title":"is_supported_type  <code>abstractmethod</code> <code>classmethod</code>","text":"<pre><code>is_supported_type(value: Any) -&gt; TypeGuard[type[T]]\n</code></pre> <p>Check if the value is supported by the adapter.</p> PARAMETER DESCRIPTION <code>value</code> <p>The value to check.</p> <p> TYPE: <code>Any</code> </p> RETURNS DESCRIPTION <code>TypeGuard[type[T]]</code> <p>Whether the value is supported by the adapter.</p> Source code in <code>src/anymerge/adapters/base_adapter.py</code> <pre><code>@classmethod\n@abc.abstractmethod\ndef is_supported_type(cls, value: typing.Any) -&gt; typing.TypeGuard[type[T]]:\n    \"\"\"Check if the value is supported by the adapter.\n\n    Args:\n        value: The value to check.\n\n    Returns:\n        Whether the value is supported by the adapter.\n    \"\"\"\n</code></pre>"},{"location":"reference/anymerge/adapters/base_adapter/#anymerge.adapters.base_adapter.BaseAdapter.get_fields","title":"get_fields  <code>abstractmethod</code>","text":"<pre><code>get_fields() -&gt; dict[Any, FieldInfo]\n</code></pre> <p>Get the fields of the model.</p> RETURNS DESCRIPTION <code>dict[Any, FieldInfo]</code> <p>The fields of the model.</p> Source code in <code>src/anymerge/adapters/base_adapter.py</code> <pre><code>@abc.abstractmethod\ndef get_fields(self) -&gt; dict[typing.Any, FieldInfo]:\n    \"\"\"Get the fields of the model.\n\n    Returns:\n        The fields of the model.\n    \"\"\"\n</code></pre>"},{"location":"reference/anymerge/adapters/base_adapter/#anymerge.adapters.base_adapter.BaseAdapter.get_values","title":"get_values  <code>abstractmethod</code>","text":"<pre><code>get_values(value: T) -&gt; dict[Any, Any]\n</code></pre> <p>Get the values of the instance.</p> PARAMETER DESCRIPTION <code>value</code> <p>The instance to get the values from.</p> <p> TYPE: <code>T</code> </p> RETURNS DESCRIPTION <code>dict[Any, Any]</code> <p>The values of the instance.</p> Source code in <code>src/anymerge/adapters/base_adapter.py</code> <pre><code>@abc.abstractmethod\ndef get_values(self, value: T) -&gt; dict[typing.Any, typing.Any]:\n    \"\"\"Get the values of the instance.\n\n    Args:\n        value: The instance to get the values from.\n\n    Returns:\n        The values of the instance.\n    \"\"\"\n</code></pre>"},{"location":"reference/anymerge/adapters/base_adapter/#anymerge.adapters.base_adapter.BaseAdapter.copy","title":"copy  <code>abstractmethod</code>","text":"<pre><code>copy(value: T, *, changes: dict[Any, Any]) -&gt; T\n</code></pre> <p>Copy the instance with the changes applied.</p> PARAMETER DESCRIPTION <code>value</code> <p>The instance to copy.</p> <p> TYPE: <code>T</code> </p> <code>changes</code> <p>The changes to apply to the instance.</p> <p> TYPE: <code>dict[Any, Any]</code> </p> RETURNS DESCRIPTION <code>T</code> <p>The copied instance.</p> Source code in <code>src/anymerge/adapters/base_adapter.py</code> <pre><code>@abc.abstractmethod\ndef copy(self, value: T, *, changes: dict[typing.Any, typing.Any]) -&gt; T:\n    \"\"\"Copy the instance with the changes applied.\n\n    Args:\n        value: The instance to copy.\n        changes: The changes to apply to the instance.\n\n    Returns:\n        The copied instance.\n    \"\"\"\n</code></pre>"},{"location":"reference/anymerge/adapters/base_adapter/#anymerge.adapters.base_adapter.BaseAdapter.wrap","title":"wrap","text":"<pre><code>wrap(value: T) -&gt; WrappedValue[T]\n</code></pre> <p>Wrap the value with the adapter.</p> PARAMETER DESCRIPTION <code>value</code> <p>The value to wrap.</p> <p> TYPE: <code>T</code> </p> RETURNS DESCRIPTION <code>WrappedValue[T]</code> <p>The wrapped value.</p> Source code in <code>src/anymerge/adapters/base_adapter.py</code> <pre><code>def wrap(self, value: T) -&gt; WrappedValue[T]:\n    \"\"\"Wrap the value with the adapter.\n\n    Args:\n        value: The value to wrap.\n\n    Returns:\n        The wrapped value.\n    \"\"\"\n    return WrappedValue(value, adapter=self)\n</code></pre>"},{"location":"reference/anymerge/adapters/base_adapter/#anymerge.adapters.base_adapter.WrappedValue","title":"WrappedValue","text":"<pre><code>WrappedValue(value: T, *, adapter: BaseAdapter[T])\n</code></pre> <p>               Bases: <code>Generic[T]</code></p> <p>A wrapped value with an adapter.</p> Source code in <code>src/anymerge/adapters/base_adapter.py</code> <pre><code>def __init__(self, value: T, *, adapter: BaseAdapter[T]) -&gt; None:\n    self.value = value\n    self.adapter = adapter\n</code></pre>"},{"location":"reference/anymerge/adapters/base_adapter/#anymerge.adapters.base_adapter.WrappedValue.value","title":"value  <code>instance-attribute</code>","text":"<pre><code>value: T = value\n</code></pre> <p>The wrapped value.</p>"},{"location":"reference/anymerge/adapters/base_adapter/#anymerge.adapters.base_adapter.WrappedValue.adapter","title":"adapter  <code>instance-attribute</code>","text":"<pre><code>adapter: BaseAdapter[T] = adapter\n</code></pre> <p>The adapter for the value.</p>"},{"location":"reference/anymerge/adapters/dataclass_adapter/","title":"dataclass_adapter","text":""},{"location":"reference/anymerge/adapters/dataclass_adapter/#anymerge.adapters.dataclass_adapter","title":"anymerge.adapters.dataclass_adapter","text":""},{"location":"reference/anymerge/adapters/dict_adapter/","title":"dict_adapter","text":""},{"location":"reference/anymerge/adapters/dict_adapter/#anymerge.adapters.dict_adapter","title":"anymerge.adapters.dict_adapter","text":""},{"location":"reference/anymerge/adapters/pydantic_adapter/","title":"pydantic_adapter","text":""},{"location":"reference/anymerge/adapters/pydantic_adapter/#anymerge.adapters.pydantic_adapter","title":"anymerge.adapters.pydantic_adapter","text":""},{"location":"reference/anymerge/adapters/typeddict_adapter/","title":"typeddict_adapter","text":""},{"location":"reference/anymerge/adapters/typeddict_adapter/#anymerge.adapters.typeddict_adapter","title":"anymerge.adapters.typeddict_adapter","text":""}]}